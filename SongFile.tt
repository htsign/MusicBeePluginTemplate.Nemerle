<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".n" #>
<#
  var tagTypes = new List<string>(new[] { "artist", "albumArtist", "trackTitle", "album", "composer" });
  tagTypes.AddRange(Enumerable.Range(1, 16).Select(i => "custom" + i.ToString()));
#>
#pragma indent

using System
using System.Collections.Generic
using System.IO
using System.Reflection
using MusicBeePlugin.Plugin
using Nemerle.Utility

namespace MusicBeePlugin
  public class SongFile : IDisposable
    private mbApiInterface : MusicBeeApiInterface
    private propCache : Dictionary[string, PropertyInfo] = Dictionary()

    #region constructor
    public this(api : MusicBeeApiInterface, filePath : string)
      mbApiInterface = api
      fullPath = filePath
    #endregion

    #region public properties
    [Accessor(flags = WantSetter)] \
    mutable autoCommit : bool = true

    [Accessor] \
    private fullPath : string
    
    public Item[name : string] : string
      private prop : Func[string, PropertyInfo] = name =>
        when (!propCache.ContainsKey(name))
          propCache[name] = typeof(SongFile).GetProperty(name)
        propCache[name]
        
      get
        prop(name)?.GetValue(this, null) :> string
      set
        prop(name)?.SetValue(this, value, null)

    public Item[type : MetaDataType] : string
      get this[type.ToString()]
      set this[type.ToString()] = value
    
    <# foreach (string tagType in tagTypes) { #>
    public <#= ToPascalCase(tagType) #> : string
      mutable <#= tagType #> : string = null
      get
        when (<#= tagType #> == null)
          <#= tagType #> = mbApiInterface.Library_GetFileTag(FullPath, MetaDataType.<#= ToPascalCase(tagType) #>)
        <#= tagType #>
      set
        _ = mbApiInterface.Library_SetFileTag(FullPath, MetaDataType.<#= ToPascalCase(tagType) #>, value)
        <#= tagType #> = value
    
    <# } #>
#endregion

    #region public methods
    public Commit() : bool
      mbApiInterface.Library_CommitTagsToFile(FullPath)
    #endregion

    #region disposable pattern
    public Dispose() : void
      when (AutoCommit)
        _ = Commit()
      GC.SuppressFinalize(this)

    protected override Finalize() : void
      Dispose()
    #endregion

<#+
public static string ToPascalCase(string text)
{
    if (text.Length < 1) return string.Empty;
    return char.ToUpper(text[0]) + text.Substring(1);
}
#>